uniform vec3 C_eyePos;
uniform float specularIntensity;
uniform float specularPower;
uniform int terrain;
uniform sampler2D rTex;
uniform sampler2D gTex;
uniform sampler2D bTex;
uniform sampler2D blendMap;

struct BaseLight
{
	vec3 color;
	float intensity;
};

struct Attenuation
{
	float constant;
	float linear;
	float exponent;
};

struct DirectionalLight
{
	BaseLight base;
	vec3 direction;
};

struct PointLight
{
	Attenuation atten;
	BaseLight base;
	vec3 position;
	float range;
};

struct SpotLight
{
    PointLight pointLight;
    vec3 direction;
    float cuttoff;
};

vec3 gamma = vec3(1.0/2.2, 1.0/2.2, 1.0/2.2);


vec4 calcLight(BaseLight base, vec3 direction, vec3 normal, vec3 worldPos)
{
	float diffuseFactor = dot(normal,-direction);
	
	    vec4 diffuseColor = vec4(0,0,0,0);
		vec4 specularColor = vec4(0,0,0,0);
	
	if(diffuseFactor > 0){
		diffuseColor = vec4(base.color,1.0) * base.intensity * diffuseFactor;
		
		vec3 directionToEye = normalize(C_eyePos - worldPos);
		//vec3 reflectDirection = normalize(reflect(direction,normal));
		vec3 halfDirection = normalize(directionToEye - direction);
		
		float specularFactor = dot(halfDirection, normal);
		//float specularFactor = dot(directionToEye,reflectDirection);
		specularFactor = pow(specularFactor,specularPower);
		
		if(specularFactor > 0){
			specularColor = vec4(base.color,1.0) * specularIntensity * specularFactor;
		}
	}
	
	return diffuseColor + specularColor;
}


vec4 calcPointLight(PointLight pointLight, vec3 normal, vec3 worldPos)
{
	vec3 lightDirection = worldPos - pointLight.position;
	float distanceToPoint = length(lightDirection);
	
	
	if(distanceToPoint > pointLight.range)
		return vec4(0,0,0,0);
		
	lightDirection = normalize(lightDirection);
	vec4 color = calcLight(pointLight.base,lightDirection,normal, worldPos);
	
	float attenuation = pointLight.atten.constant +
						pointLight.atten.linear * distanceToPoint +
						pointLight.atten.exponent * distanceToPoint * distanceToPoint + 
						0.00001;
						
	
	return color / attenuation;
}


vec4 calcSpotLight(SpotLight spotLight, vec3 normal, vec3 worldPos)
{
    vec3 lightDirection = normalize(worldPos - spotLight.pointLight.position);
    float spotFactor = dot(lightDirection, spotLight.direction);
    
    vec4 color = vec4(0,0,0,0);
    
    if(spotFactor > spotLight.cuttoff)
    {
        color = calcPointLight(spotLight.pointLight, normal, worldPos) *
                (1.0 - (1.0 - spotFactor)/(1.0 - spotLight.cuttoff));
    }
    
    return color;
}

vec4 calcDirectionalLight(DirectionalLight directionalLight, vec3 normal, vec3 worldPos)
{
	return calcLight(directionalLight.base, -directionalLight.direction,normal, worldPos);
}

vec4 terrainLight(sampler2D diffuse, vec2 texCoord0){
		vec4 blendMapColor = texture2D(blendMap, texCoord0.xy);
		float backTextureAmount = 1 - (blendMapColor.r + blendMapColor.g + blendMapColor.b);
		vec2 tiledCoords = texCoord0 * 40.0;
		vec4 backgroundTexColor = texture2D(diffuse,tiledCoords.xy) * backTextureAmount;
		vec4 rTexColor = texture2D(rTex, tiledCoords.xy) * blendMapColor.r;
		vec4 gTexColor = texture2D(gTex, tiledCoords.xy) * blendMapColor.g;
		vec4 bTexColor = texture2D(bTex, tiledCoords.xy) * blendMapColor.b;
		
		vec4 totalColor = backgroundTexColor + rTexColor + gTexColor + bTexColor;
		
		return totalColor;
}